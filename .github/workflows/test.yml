name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - python: "3.7"
            django: "Django>=2.2,<2.3"
            taggit: "django-taggit>=1,<1.3"
            database: "sqlite3"
            psycopg: "psycopg2>=2.6,<2.9"
            experimental: false
          - python: "3.8"
            django: "Django>=3.0,<3.1"
            taggit: "django-taggit>=1.3,<2.0"
            database: "postgresql"
            psycopg: "psycopg2>=2.6,<2.9"
            experimental: false
          - python: "3.9"
            django: "Django>=3.1,<3.2"
            taggit: "django-taggit>=1.3,<2.0"
            database: "sqlite3"
            psycopg: "psycopg2>=2.6,<2.9"
            experimental: false
          - python: "3.10"
            django: "Django>=3.2,<3.3"
            taggit: "django-taggit>=2.0"
            database: "postgresql"
            psycopg: "psycopg2>=2.6"
            experimental: false
          - python: "3.10"
            django: "Django>=4.0,<4.1"
            taggit: "django-taggit>=2.0"
            database: "postgresql"
            psycopg: "psycopg2>=2.6"
            experimental: false
          - python: "3.10"
            django: "git+https://github.com/django/django.git@stable/4.0.x#egg=Django"
            taggit: "django-taggit>=2.0"
            database: "sqlite3"
            psycopg: "psycopg2>=2.6"
            experimental: true
          - python: "3.10"
            django: "git+https://github.com/django/django.git@main#egg=Django"
            taggit: "django-taggit>=2.0"
            database: "postgresql"
            psycopg: "psycopg2>=2.6"
            experimental: true
    services:
      postgres:
        image: postgres:10.8
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install "${{ matrix.psycopg }}"
          pip install "${{ matrix.django }}"
          pip install "${{ matrix.taggit }}"
      - name: Test
        run: ./runtests.py
        env:
          DATABASE_ENGINE: django.db.backends.${{ matrix.database }}
          DATABASE_HOST: localhost
          DATABASE_USER: postgres
          DATABASE_PASS: postgres

  deploy:

    needs: test

    if: needs.test.result == 'success' && startsWith( github.ref, 'refs/tags/v' )

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Flit
        run: |
          python -m pip install --upgrade pip
          pip install flit

      - name: Install Dependencies
        run: |
          flit install --symlink

      - name: Publish 🐍 distribution 📦 to Test PyPI
        env:
          FLIT_USERNAME: ${{ secrets.FLIT_TEST_USERNAME }}
          FLIT_PASSWORD: ${{ secrets.FLIT_TEST_PASSWORD }}
          FLIT_INDEX_URL: https://test.pypi.org/legacy/
        # Generate a setup.py file in the sdist, so it can be installed by older versions of pip.
        # https://flit.pypa.io/en/latest/cmdline.html?highlight=setup.cfg#cmdoption-flit-publish-setup-py
        run: flit publish --setup-py

      # - name: Publish 🐍 distribution 📦 to PyPI
      #   env:
      #     FLIT_USERNAME: ${{ secrets.FLIT_USERNAME }}
      #     FLIT_PASSWORD: ${{ secrets.FLIT_PASSWORD }}
      #     FLIT_INDEX_URL: https://upload.pypi.org/legacy/
      #   run: flit publish --setup-py

      - name: Get the version
        id: get_version
        run: |
          echo "${{ github.ref }}"
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Generate Release Title
        id: get_release_title
        shell: bash
        run: |
          export TODAY="($(TZ=Africa/Lusaka date --iso))"
          echo ::set-output name=RELEASE_NAME::"${{ steps.get_version.outputs.VERSION }} $TODAY"

      - name: Extract Release Notes
        # This creates a file LATEST_RELEASE_NOTES.md in the parent directory (../)
        run: |
          export VER=${{ steps.get_version.outputs.VERSION }}
          sed  "1,/^$VER/d;/^[0-9]/Q" CHANGELOG.txt | tail -n +2 > ../LATEST_RELEASE_NOTES.md

      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_release_title.outputs.RELEASE_NAME }}
          body_path: ../LATEST_RELEASE_NOTES.md
          files: dist/*
